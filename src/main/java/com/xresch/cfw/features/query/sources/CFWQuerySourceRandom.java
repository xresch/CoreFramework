package com.xresch.cfw.features.query.sources;

import java.util.concurrent.LinkedBlockingQueue;

import com.xresch.cfw._main.CFW;
import com.xresch.cfw.datahandling.CFWField;
import com.xresch.cfw.datahandling.CFWField.FormFieldType;
import com.xresch.cfw.datahandling.CFWObject;
import com.xresch.cfw.features.query.CFWQuery;
import com.xresch.cfw.features.query.CFWQuerySource;
import com.xresch.cfw.features.query.EnhancedJsonObject;
import com.xresch.cfw.features.query.FeatureQuery;
import com.xresch.cfw.features.query.commands.CFWQueryCommandSource;
import com.xresch.cfw.features.usermgmt.User;
import com.xresch.cfw.response.bootstrap.AlertMessage.MessageType;
import com.xresch.cfw.utils.CFWRandom;

/**************************************************************************************************************
 * 
 * @author Reto Scheiwiller, (c) Copyright 2021 
 * @license MIT-License
 **************************************************************************************************************/
public class CFWQuerySourceRandom extends CFWQuerySource {

	/******************************************************************
	 *
	 ******************************************************************/
	public CFWQuerySourceRandom(CFWQuery parent) {
		super(parent);
	}

	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String uniqueName() {
		return "random";
	}

	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionShort() {
		return "Creates random person data useful for training, demostration and testing.";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionTime() {
		return "Time values are generated by this source based on the selected timeframe.";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionHTML() {
		return CFW.Files.readPackageResource(FeatureQuery.PACKAGE_MANUAL+".sources", "source_random.html");
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionRequiredPermission() {
		return "None";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public boolean hasPermission(User user) {
		return true;
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public CFWObject getParameters() {
		return new CFWObject()
			.addField(
				CFWField.newInteger(FormFieldType.NUMBER, "records")
					.setDescription("Number of records to generate. (Default: 1000)")
					.setValue(1000)
			)
		;
	}
	

	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public void execute(CFWObject parameters, LinkedBlockingQueue<EnhancedJsonObject> outQueue, long earliestMillis, long latestMillis, int limit) throws Exception {
		
		int records = (int)parameters.getField("records").getValue();

		long earliest = this.getParent().getContext().getEarliestMillis();
		long latest = this.getParent().getContext().getLatestMillis();
		long diff = latest - earliest;
		long diffStep = diff / records;
		
		for(int i = 0; i < records; i++) {
			
			EnhancedJsonObject person = new EnhancedJsonObject( CFWRandom.randomJSONObjectMightyPerson(4, true) );
			person.addProperty("INDEX", i );
			person.addProperty("TIME", earliest +(i * diffStep));
			outQueue.add(person);
			
			if( isLimitReached(limit, i)) { break; }
		}
		

	}

}
