package com.xresch.cfw.features.query.sources;

import java.text.ParseException;
import java.util.concurrent.LinkedBlockingQueue;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.xresch.cfw._main.CFW;
import com.xresch.cfw.datahandling.CFWField;
import com.xresch.cfw.datahandling.CFWField.FormFieldType;
import com.xresch.cfw.datahandling.CFWObject;
import com.xresch.cfw.features.core.AutocompleteResult;
import com.xresch.cfw.features.query.CFWQuery;
import com.xresch.cfw.features.query.CFWQueryAutocompleteHelper;
import com.xresch.cfw.features.query.CFWQuerySource;
import com.xresch.cfw.features.query.EnhancedJsonObject;
import com.xresch.cfw.features.query.FeatureQuery;
import com.xresch.cfw.features.usermgmt.User;
import com.xresch.cfw.utils.CFWRandom;
import com.xresch.cfw.utils.CFWRandom.RandomDataType;

/**************************************************************************************************************
 * 
 * @author Reto Scheiwiller, (c) Copyright 2022 
 * @license MIT-License
 **************************************************************************************************************/
public class CFWQuerySourceRandom extends CFWQuerySource {

	/******************************************************************
	 *
	 ******************************************************************/
	public CFWQuerySourceRandom(CFWQuery parent) {
		super(parent);
	}

	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String uniqueName() {
		return "random";
	}

	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionShort() {
		return "Creates random person data useful for training, demostration and testing.";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionTime() {
		return "Time values are generated by this source based on the selected timeframe.";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionHTML() {
		return CFW.Files.readPackageResource(FeatureQuery.PACKAGE_MANUAL+".sources", "source_random.html");
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public String descriptionRequiredPermission() {
		return "None";
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public boolean hasPermission(User user) {
		return true;
	}
	
	/***********************************************************************************************
	 * 
	 ***********************************************************************************************/
	@Override
	public void autocomplete(AutocompleteResult result, CFWQueryAutocompleteHelper helper) {
		// do nothing
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public CFWObject getParameters() {
		return new CFWObject()
			.addField(
				CFWField.newInteger(FormFieldType.NUMBER, "records")
					.setDescription("Number of records to generate. (Default: 200)")
					.setValue(200)
			)
			.addField(
					CFWField.newString(FormFieldType.TEXT, "type")
						.setDescription("The type of data to generate, one of: 'default' | 'numbers' | 'arrays' | 'series' | 'stats' | 'tickets' | 'countries' | 'batchjobs' | 'various' ")
						.setValue("default")
				)
			.addField(
					CFWField.newInteger(FormFieldType.NUMBER, "seriesCount")
					.setDescription("Max number of series to generate for type 'series'.")
					.setValue(6)
					)
		;
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public void parametersPermissionCheck(CFWObject parameters) throws ParseException {
		//do nothing
	}
	
	/******************************************************************
	 *
	 ******************************************************************/
	@Override
	public void execute(CFWObject parameters, LinkedBlockingQueue<EnhancedJsonObject> outQueue, long earliestMillis, long latestMillis, int limit) throws Exception {
		
		//----------------------------
		// Determine Records
		int records = (int)parameters.getField("records").getValue();
		if(records <= 0) { records = 1; }
		
		if(isLimitReached(limit, records)){
			records = Math.min(limit, records);
		}
		
		//----------------------------
		// Get Parameters
		String type = (String)parameters.getField("type").getValue();
		int seriesCount = (Integer)parameters.getField("seriesCount").getValue();

		long earliest = this.getParent().getContext().getEarliestMillis();
		long latest = this.getParent().getContext().getLatestMillis();
		
		//------------------------------
		// Check Data Type
		type = type.trim().toUpperCase();
		
		if( !RandomDataType.has(type) ) {
			CFW.Messages.addErrorMessage("source random: Unknown type '"+type+"'");
			return;
		}
		
		RandomDataType dataType = RandomDataType.valueOf(type);
		
		//----------------------------
		// Generate Records
		JsonArray array = CFW.Random.records(records, dataType, seriesCount, earliest, latest);
		
		for(JsonElement element : array) {
			outQueue.add(new EnhancedJsonObject(element.getAsJsonObject()));
		}
	}
	

}
