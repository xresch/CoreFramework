package com.xresch.cfw.db.spaces;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Logger;

import com.xresch.cfw.datahandling.CFWField;
import com.xresch.cfw.datahandling.CFWField.FormFieldType;
import com.xresch.cfw.datahandling.CFWFieldChangeHandler;
import com.xresch.cfw.datahandling.CFWObject;
import com.xresch.cfw.db.spaces.SpaceGroup.SpaceGroupFields;
import com.xresch.cfw.features.api.APIDefinition;
import com.xresch.cfw.features.api.APIDefinitionFetch;
import com.xresch.cfw.logging.CFWLog;
import com.xresch.cfw.validation.LengthValidator;

/**************************************************************************************************************
 * 
 * @author Reto Scheiwiller, (c) Copyright 2019 
 * @license MIT-License
 **************************************************************************************************************/
public class Space extends CFWObject {
	
	public static final String TABLE_NAME = "CFW_SPACE";
	
	
	/* P0 - P9 auto generated by CFWObject.setHierarchyLevels(10); */
	public enum SpaceFields{
		P0,
		P1,
		P2,
		P3,
		P4,
		P5,
		P6,
		P7,
		P8,
		P9,
		FK_ID_SPACEGROUP,
		PK_ID,
		NAME,
		DESCRIPTION,
		IS_DELETABLE,
		IS_RENAMABLE,
	}

	private static Logger logger = CFWLog.getLogger(Space.class.getName());
	
	private CFWField<Integer> foreignKeySpaceGroup = CFWField.newInteger(FormFieldType.NONE, SpaceFields.FK_ID_SPACEGROUP.toString())
			.setForeignKeyCascade(this, SpaceGroup.class, SpaceGroupFields.PK_ID)
			.setDescription("The id of the space group the space is part of.")
			.apiFieldType(FormFieldType.NUMBER)
			.setValue(null);
	
	private CFWField<Integer> id = CFWField.newInteger(FormFieldType.HIDDEN, SpaceFields.PK_ID.toString())
			.setPrimaryKeyAutoIncrement(this)
			.setDescription("The id of the space.")
			.apiFieldType(FormFieldType.NUMBER)
			.setValue(null);
	
	private CFWField<String> name = CFWField.newString(FormFieldType.TEXT, SpaceFields.NAME.toString())
			.setColumnDefinition("VARCHAR(255) UNIQUE")
			.setDescription("The name of the space.")
			.addValidator(new LengthValidator(1, 255))
			.setChangeHandler(new CFWFieldChangeHandler<String>() {
				public boolean handle(String oldValue, String newValue) {
					if(name.isDisabled()) { 
						new CFWLog(logger)
						.severe("The name cannot be changed as the field is disabled.");
						return false; 
					}
					return true;
				}
			});
	
//	private CFWField<Integer> type = CFWField.newInteger(FormFieldType.NONE, SpaceFields.PK_ID.toString())
//			.setPrimaryKeyAutoIncrement(this)
//			.setDescription("The id of the space.")
//			.apiFieldType(FormFieldType.SELECT)
//			.setOptions(new String[] {"regular", "personal", "global", "system"})
//			.setValue(-999);
	
	private CFWField<String> description = CFWField.newString(FormFieldType.TEXTAREA, SpaceFields.DESCRIPTION.toString())
			.setColumnDefinition("CLOB")
			.setDescription("The description of the space.")
			.addValidator(new LengthValidator(-1, 2000000));
	
	private CFWField<Boolean> isDeletable = CFWField.newBoolean(FormFieldType.NONE, SpaceFields.IS_DELETABLE.toString())
			.setDescription("Flag to define if the space can be deleted or not.")
			.setColumnDefinition("BOOLEAN")
			.setValue(true);
	
	private CFWField<Boolean> isRenamable = CFWField.newBoolean(FormFieldType.NONE, SpaceFields.IS_RENAMABLE.toString())
			.setColumnDefinition("BOOLEAN DEFAULT TRUE")
			.setDescription("Flag to define if the space can be renamed or not.")
			.setValue(true)
			.setChangeHandler(new CFWFieldChangeHandler<Boolean>() {
				
				@Override
				public boolean handle(Boolean oldValue, Boolean newValue) {
					if(!newValue) {
						name.isDisabled(true);
					}else {
						name.isDisabled(false);
					}
					
					return true;
				}
			});;
	
	public Space() {
		initializeFields();
	}
	
	public Space(Integer spacegroupid, String name) {
		initializeFields();
		this.foreignKeySpaceGroup.setValue(spacegroupid);
		this.name.setValue(name);
	}
	
	public Space(ResultSet result) throws SQLException {
		initializeFields();
		this.mapResultSet(result);	
	}
	
	private void initializeFields() {
		this.setTableName(TABLE_NAME);
		this.setHierarchyLevels(10);
		this.addFields(foreignKeySpaceGroup, id, name, description, isDeletable, isRenamable);
	}
	
	/**************************************************************************************
	 * 
	 **************************************************************************************/
	@Override
	public void initDB() {
				
	}
	
	/**************************************************************************************
	 * 
	 **************************************************************************************/
	@Override
	public ArrayList<APIDefinition> getAPIDefinitions() {
		ArrayList<APIDefinition> apis = new ArrayList<APIDefinition>();
		
		
		String[] inputFields = 
				new String[] {
						SpaceFields.PK_ID.toString(), 
						SpaceFields.NAME.toString(),
				};
		
		String[] outputFields = 
				new String[] {
						SpaceFields.PK_ID.toString(), 
						SpaceFields.NAME.toString(),
						SpaceFields.DESCRIPTION.toString(),
						SpaceFields.IS_DELETABLE.toString(),
						SpaceFields.IS_RENAMABLE.toString(),		
				};

		//----------------------------------
		// fetchJSON
		APIDefinitionFetch fetchDataAPI = 
				new APIDefinitionFetch(
						this.getClass(),
						this.getClass().getSimpleName(),
						"fetchData",
						inputFields,
						outputFields
				);
		
		apis.add(fetchDataAPI);
		
		return apis;
	}

	public Integer id() {
		return id.getValue();
	}
	
	public Space id(Integer id) {
		this.id.setValue(id);
		return this;
	}
	
	public String name() {
		return name.getValue();
	}
	
	public Space name(String name) {
		this.name.setValue(name);
		return this;
	}
	
	public String description() {
		return description.getValue();
	}

	public Space description(String description) {
		this.description.setValue(description);
		return this;
	}

	public boolean isDeletable() {
		return isDeletable.getValue();
	}
	
	public Space isDeletable(boolean isDeletable) {
		this.isDeletable.setValue(isDeletable);
		return this;
	}	
	
	public boolean isRenamable() {
		return isRenamable.getValue();
	}
	
	public Space isRenamable(boolean isRenamable) {
		this.isRenamable.setValue(isRenamable);
		return this;
	}	
	
}
